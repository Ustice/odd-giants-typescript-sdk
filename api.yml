openapi: 3.0.0
info:
  contact:
    email: ustice@gmail.com
  description: Odd Giants Public API
  license:
    name: MIT
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Odd Giants Public API
  version: 0.0.1

components:
  parameters:
    achievement_id:
      in: path
      name: achievement_id
      required: true
      schema:
        $ref: '#/components/schemas/achievement_id'
    category_id:
      in: path
      name: category_id
      required: true
      schema:
        $ref: '#/components/schemas/category_id'
    giant_id:
      in: path
      name: giant_id
      required: true
      schema:
        $ref: '#/components/schemas/giant_id'
    inhabitant_id:
      in: path
      name: inhabitant_id
      required: true
      schema:
        $ref: '#/components/schemas/inhabitant_id'
    item_id:
      in: path
      name: item_id
      required: true
      schema:
        $ref: '#/components/schemas/item_id'
    location_id:
      in: path
      name: location_id
      required: true
      schema:
        $ref: '#/components/schemas/location_id'
      example: GCR105E77812AEF
    region_id:
      in: path
      name: region_id
      required: true
      schema:
        $ref: '#/components/schemas/region_id'
    search_query:
      in: query
      name: search_query
      required: true
      schema:
        type: string
        format: uri-encoded
    skill_id:
      in: path
      name: skill_id
      required: true
      schema:
        $ref: '#/components/schemas/skill_id'
    upgrade_id:
      in: path
      name: upgrade_id
      required: true
      schema:
        $ref: '#/components/schemas/upgrade_id'
    user_id:
      in: path
      name: user_id
      required: true
      schema:
        $ref: '#/components/schemas/user_id'
  schemas:
    # -----------------------------------
    # Nominal Types
    # -----------------------------------
    achievement_id:
      type: string
      pattern: '^[a-z][a-z_0-9]*$'
    category_id:
      type: string
      pattern: '^[a-z][a-z_0-9]*$'
    giant_id:
      type: string
      enum:
        - alph
        - cosma
        - friendly
        - grendaline
        - humbaba
        - lem
        - mab
        - pot
        - spriggan
        - tii
        - zille
    inhabitant_id:
      type: string
      pattern: '^npc_[a-z_0-9]+$'
    item_id:
      type: string
      pattern: '^[a-z][a-z_0-9]*$'
    location_id:
      description: Identifier for the Location Model
      type: string
      format: '^[0-9A-Z]{15}$'
      example: GCR105E77812AEF
    quest_id:
      type: string
      pattern: '^[a-z][a-z_0-9]*$'
    recipe_id:
      type: integer
    region_id:
      type: string
      pattern: '^[a-z][a-z_0-9]*$'
    skill_id:
      type: string
      pattern: '^[a-z][a-z_0-9]+$'
    upgrade_id:
      type: string
      pattern: '^[a-z][a-z_0-9]*$'
    user_id:
      description: Identifier for the User Model
      example: 572
      type: integer
    datetime:
      type: string
      format: datetime
    # -----------------------------------
    # Models
    # -----------------------------------
    AuthenticationCredentials:
      properties:
        email:
          example: user@domain.tld
          format: email
          type: string
        password:
          example: THIS_IS_A_BAD_PASSWORD
          type: string
        remember:
          example: true
          type: boolean
      required:
        - email
        - password
      type: object
    Category:
      description: Categories of entries in the encyclopedia
      required:
        - created_at
        - description
        - id
        - name
      properties:
        created_at:
          type: string
          format: date
        description:
          type: string
        id:
          $ref: '#/components/schemas/category_id'
        name:
          type: string
    CategoryIndex:
      description: Index of the Encyclopedia
      required:
        - achievements
        - giants
        - inhabitants
        - items
        - locations
        - skills
        - upgrades
      properties:
        achievements:
          type: object
          title: CategoryAchievements
          properties:
            categories:
              type: array
              items:
                $ref: '#/components/schemas/Category'
        giants:
          type: object
          title: GiantList
          properties:
            categories:
              type: array
              items:
                $ref: '#/components/schemas/Giant'
        inhabitants:
          type: object
          title: CategoryInhabitants
          properties:
            categories:
              type: array
              items:
                $ref: '#/components/schemas/Category'
        items:
          type: object
          title: CategoryItems
          properties:
            categories:
              type: array
              items:
                $ref: '#/components/schemas/Category'
        locations:
          type: object
          title: CategoryLocations
          properties:
            categories:
              type: array
              items:
                $ref: '#/components/schemas/Region'
        skills:
          type: object
          title: CategorySkills
          properties:
            categories:
              type: array
              items:
                $ref: '#/components/schemas/Category'
        upgrades:
          type: object
          title: CategoryUpgrades
          properties:
            categories:
              type: array
              items:
                $ref: '#/components/schemas/Category'
    GiantDetails:
      title: GiantDetails
      allOf:
        - $ref: '#/components/schemas/Giant'
        - $ref: '#/components/schemas/GiantConnections'
    GiantConnections:
      type: object
      required:
        - skills
      properties:
        skills:
          type: array
          items:
            $ref: '#/components/schemas/GiantSkill'
    GiantSkill:
      title: GiantSkill
      allOf:
        - $ref: '#/components/schemas/Skill'
        - $ref: '#/components/schemas/GiantSkillConnection'
    GiantSkillConnection:
      type: object
      required:
        - pivot
      properties:
        pivot:
          title: GiantSkillPivot
          type: object
          required:
            - giant_id
            - skill_id
            - primary
          properties:
            giant_id:
              $ref: '#/components/schemas/giant_id'
            skill_id:
              $ref: '#/components/schemas/skill_id'
            primary:
              type: integer
              enum:
                - 0
                - 1
    Giant:
      type: object
      required:
        - description
        - followers_name
        - gender
        - id
        - name
        - qualities
        - type
        - updated_at
        - created_at
      properties:
        description:
          type: string
        followers_name:
          type: string
        gender:
          type: string
        id:
          $ref: '#/components/schemas/giant_id'
        name:
          type: string
        qualities:
          type: string
        type:
          type: string
        updated_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
    InhabitantDetails:
      title: InhabitantDetails
      allOf:
        - $ref: '#/components/schemas/Inhabitant'
        - $ref: '#/components/schemas/InhabitantConnections'
    InhabitantConnections:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/InhabitantItem'
    InhabitantItem:
      title: InhabitantItem
      allOf:
        - $ref: '#/components/schemas/Item'
        - $ref: '#/components/schemas/InhabitantItemConnection'
    InhabitantItemConnection:
      type: object
      required:
        - pivot
      properties:
        pivot:
          title: InhabitantItemPivot
          type: object
          required:
            - inhabitant_id
            - item_id
          properties:
            inhabitant_id:
              $ref: '#/components/schemas/inhabitant_id'
            item_id:
              $ref: '#/components/schemas/item_id'
    Inhabitant:
      required:
        - article
        - category_id
        - created_at
        - description
        - has_infopage
        - id
        - items
        - name
        - name_plural
        - updated_at
      properties:
        article:
          type: string
        category_id:
          $ref: '#/components/schemas/category_id'
        created_at:
          type: string
          format: date-time
        description:
          type: string
        has_infopage:
          type: integer
          example: 1
        id:
          $ref: '#/components/schemas/inhabitant_id'
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        name:
          type: string
        name_plural:
          type: string
        updated_at:
          type: string
          format: date-time
    ItemDetails:
      title: ItemDetails
      allOf:
        - $ref: '#/components/schemas/Item'
        - $ref: '#/components/schemas/ItemConnections'
    ItemConnections:
      type: object
      properties:
        recipes_tool:
          type: array
          items:
            $ref: '#/components/schemas/RecipeItem'
        recipes_input:
          type: array
          items:
            $ref: '#/components/schemas/RecipeItem'
        recipes_output:
          type: array
          items:
            $ref: '#/components/schemas/RecipeItem'
        npcs:
          type: array
          items:
            $ref: '#/components/schemas/ItemInhabitant'
        achievements:
          type: array
          items:
            $ref: '#/components/schemas/ItemAchievement'
    ItemInhabitant:
      title: ItemInhabitant
      allOf:
        - $ref: '#/components/schemas/Inhabitant'
        - $ref: '#/components/schemas/ItemInhabitantConnection'
    ItemInhabitantConnection:
      type: object
      required:
        - pivot
      properties:
        pivot:
          title: ItemInhabitant
          type: object
          required:
            - item_id
            - npc_id
          properties:
            item_id:
              $ref: '#/components/schemas/item_id'
            npc_id:
              $ref: '#/components/schemas/inhabitant_id'
    ItemAchievement:
      title: ItemAchievement
      allOf:
        - $ref: '#/components/schemas/Achievement'
        - $ref: '#/components/schemas/ItemAchievementConnection'
    ItemAchievementConnection:
      type: object
      required:
        - pivot
      properties:
        pivot:
          title: ItemAchievementPivot
          type: object
          required:
            - achievement_id
            - item_id
            - count
          properties:
            achievement_id:
              $ref: '#/components/schemas/achievement_id'
            item_id:
              $ref: '#/components/schemas/item_id'
            count:
              type: integer
    Item:
      required:
        - id
        - category_id
        - label
        - name_single
        - name_plural
        - article
        - description
        - has_info
        - has_infopage
        - is_routable
        - adjuested_scale
        - stackmax
        - capacity
        - base_cost
        - parent_classes
        - created_at
        - updated_at
        - name
        - recipes_tool
        - recipes_input
        - npcs
        - achievements
      properties:
        id:
          $ref: '#/components/schemas/item_id'
        category_id:
          $ref: '#/components/schemas/category_id'
        label:
          type: string
        name_single:
          type: string
        name_plural:
          type: string
        article:
          type: string
          enum:
            - a
            - the
        description:
          type: string
        has_info:
          type: integer
          example: 1
        has_infopage:
          type: integer
          example: 1
        is_routable:
          type: integer
          example: 1
        adjusted_scale:
          type: number
        stackmax: 
          type: integer
          example: 1
        capacity:
          type: integer
          example: 1
        base_cost:
          type: integer
          example: 1
        parent_classes:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        name:
          type: string
    LocationDetails:
      title: LocationDetails
      allOf:
        - $ref: '#/components/schemas/Location'
        - $ref: '#/components/schemas/LocationConnections'
    LocationConnections:
      type: object
      required:
        - items
        - npcs
        - connections_from
        - connections_to
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/LocationItem'
        npcs:
          type: array
          items:
            $ref: '#/components/schemas/LocationInhabitant'
        connections_from:
          $ref: '#/components/schemas/LocationLocation'
        connections_to:
          $ref: '#/components/schemas/LocationLocation'
    LocationItem:
      title: LocationItem
      allOf:
        - $ref: '#/components/schemas/Item'
        - $ref: '#/components/schemas/LocationItemConnection'
    LocationItemConnection:
      type: object
      required:
        - pivot
      properties:
        pivot:
          title: LocationItemPivot
          type: object
          required:
            - location_id
            - item_id
            - quantity
          properties:
            location_id:
              $ref: '#/components/schemas/location_id'
            item_id:
              $ref: '#/components/schemas/item_id'
            quantity:
              type: integer
    LocationInhabitant:
      title: LocationInhabitant
      allOf:
        - $ref: '#/components/schemas/Inhabitant'
        - $ref: '#/components/schemas/LocationInhabitantConnection'
    LocationInhabitantConnection:
      type: object
      required:
        - pivot
      properties:
        pivot:
          title: LocationInhabitantPivot
          type: object
          required:
            - location_id
            - npc_id
            - quantity
          properties:
            location_id:
              $ref: '#/components/schemas/location_id'
            npc_id:
              $ref: '#/components/schemas/inhabitant_id'
            quantity:
              type: integer
    LocationLocation:
      title: LocationLocation
      allOf:
        - $ref: '#/components/schemas/Location'
        - $ref: '#/components/schemas/LocationConnection'
    LocationConnection:
      type: object
      required:
        - pivot
      properties:
        pivot:
          title: LocationLocationPivot
          type: object
          required:
            - location_id
            - connection_id
          properties:
            location_id:
              $ref: '#/components/schemas/location_id'
            connection_id:
              $ref: '#/components/schemas/location_id'
    LocationContents:
      type: object
      additionalProperties:
        oneOf:
          - type: number
            description: Permenant resident population
          - type: string
            pattern: "^[0-9]+$"
            description: Current resident population
    Location:
      required:
        - contents
        - id
        - label
        - region_id
        - updated_id
        - user_id
      properties:
        contents:
          $ref: '#/components/schemas/LocationContents'
        created_at:
          $ref: '#/components/schemas/datetime'
        id:
          $ref: '#/components/schemas/location_id'
        label:
          type: string
          description: the name of the location
        region_id:
          $ref: '#/components/schemas/region_id'
        updated_at:
          type: string
          format: date-time
        user_id:
          $ref: '#/components/schemas/user_id'
    Recipe:
      required:
        - id
        - name
        - tool_wear
        - leanrt
        - energy_cost
        - xp_reward
        - wait_ms
        - task_limit
        - created_at
        - updated_at
        - pivot
        - items_tool
        - items_input
        - items_output
        - npcs
        - required_achievements
      properties:
        id:
          $ref: '#/components/schemas/recipe_id'
        name:
          type: string
        tool_wear:
          type: integer
        learnt:
          description: Whether the recipe is accessable to the player
          type: integer
          enum:
            - 0
            - 1
        energy_cost:
          type: integer
        xp_reward:
          type: integer
        wait_ms:
          description: How long the recipe takes to make
          type: integer
        task_limit:
          description: How many of the recipe can be made at once
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        tool:
          $ref: '#/components/schemas/item_id'
        pivot:
          $ref: '#/components/schemas/RecipeItemConnection'
        items_tool:
          type: array
          items:
            $ref: '#/components/schemas/RecipeItem'
        items_input:
          type: array
          items:
            $ref: '#/components/schemas/RecipeItem'
        items_output:
          type: array
          items:
            $ref: '#/components/schemas/RecipeItem'
        npcs:
          type: array
          items: 
            $ref: '#/components/schemas/SkillDetails'
        required_achievements:
          type: array
          items:
            $ref: '#/components/schemas/AchievementDetails'
    RecipeItem:
      title: RecipeItem
      allOf:
        - $ref: '#/components/schemas/Item'
        - $ref: '#/components/schemas/RecipeItemConnection'
    RecipeItemConnection:
      type: object
      required:
        - pivot
      properties:
        pivot:
          title: RecipeItemPivot
          type: object
          required:
            - recipie_id
            - item_id
            - type
            - quantity
          properties:
            recipe_id:
              $ref: '#/components/schemas/recipe_id'
            item_id:
              $ref: '#/components/schemas/item_id'
            type:
              type: string
              enum:
                - input
            quantity:
              type: integer
    Region:
      properties:
        created_at:
          $ref: '#/components/schemas/datetime'
        id:
          $ref: '#/components/schemas/region_id'
    Reward:
      properties:
        xp:
          type: integer
        currants:
          type: integer
        mood:
          type: integer
        energy:
          type: integer
        giant:
          $ref: '#/components/schemas/giant_id'
        giant_favor:
          type: integer
    SearchResults:
      type: object
      required:
        - skills
        - achievements
        - locations
        - regions
        - giants
        - items
        - inhabitants
      properties:
        skills:
          type: array
          items:
            $ref: '#/components/schemas/Skill'
        achievements:
          type: array
          items:
            $ref: '#/components/schemas/Achievement'
        locations:
          type: array
          items:
            $ref: '#/components/schemas/Location'
        regions:
          type: array
          items:
            $ref: '#/components/schemas/Region'
        giants:
          type: array
          items:
            $ref: '#/components/schemas/Giant'
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        inhabitants: 
          type: array
          items:
            $ref: '#/components/schemas/Inhabitant'
    SessionInfo:
      properties:
        access_token:
          example: >-
            fzK1fYBjPjKLW2RjMDKicHdjPjKTV{J2OjK:/fzKieXRjPjJzJjxjboSqJkpjZnJ3NEJzPHGlO{JxOUd1PXJx[ESmZ3Gl[HVzNUVzOER5N{Vy[kinN3Z{ZkV3ZXJ4PXV1PXNx[nR2N{ByNUVy[kZ6ZUB{[Uh2O{hy[URyN3RjMDKqZYRjPjJyOkRzNUJzOUN3MkF{O{Z3OTJtJn6j[jJ7JkF3OEJyNkJ2N{ZvNUN4OkdyJjxj[YixJkpjNUZ1NkFzOkF{Oj5xPEhzPEFjMDK{eXJjPjJ2O{JjMDK{Z3:x[YNjPmuegR/URlwbjFzQyzcXx9fVES6LJdv.dIL{i`Ebc2cd6`CJ3mc9lBlsRRDtNdZ9HY6Rg583k[lF4XJZL`[bGb`UNm`TBFVfPkjeE85Bmhdo.zHJtW8DBHJB46:Isw4{reXgp9BUz1gH77qCttH.DSW1xguLV4Lf`zDqSmt6d`SnZrX{BqpQqXFfZLomrQB[gpu:e6DFp1{nWIsSECszPiPH{VeDIjmz5g1wxxx71OH73MjBl.DdX7j9FZbRyigDDCwxSeQ`f7ITJFowPLJKy.wvSNHufOLkjmfED7rsHI8[y:e[51I33j3VLzbph7vjbStqH`1u1V6YDZcq:4f{Wyf{ZIxSo3Tu5jHJhTb2KLhv2XhWIMfzrbhFLURlGK9POJmOoOZXdhB8DF:3OC4UmJBi2YtukXsH[7VQ6sDl`MBGEpwFDjub2Wv[I2cRez[qWEpOUtI2WrKq:KgXt2[VXZ962l[T:7p4Y61SvhCpsN62GIm1hV6JBKOxuXu3q9E2T{92cIGsL8f:JhwEjvpRFzLR8ExDKHyrU{PkUUJt82IdTWNnUdY.VQ8DN4YuujHVbuxRue:Mvr`SO1Gd5eZgZ8jqts2XsmfXCLd4zgEMrP[eLT1DHlfw3XoMxKzxjQw[3U29uf8JGpWol1vPBv`yyEZeU7RLke9pNEMEY4eZ2hv1si4XGt
          type: string
        expires_in:
          example: 3600
          type: string
        refresh_token:
          example: >-
            efg6131142g0gc459d02d43ed4c115g17cgeg7824970621c3602d9490ee45g855685b123130gc8012cgc5cdfc2g347fb52d60301df2g982549440028487175c9bbefb0b440gb9bg886ee92999d0893c9g321384b1f0482c5c1d8dgg7d2b98450ed66f7640d74f3ef67gf5gg9dcdcfb10f650e3bdde68ed87b171ccbb89bd3g2c19171e538e5464bd1gf8gf31b8e1c8703552c809204ff619870346c985024115bb3435begge6805e2696356g219f30355662bcff7302bc6893c358ebd3545f15g6dg40d21b8bg1697g0923fd2c69ceb9be0g31c405f6814973635b5445d2ccbfe2bd487379e6e3468g10c1ge1b9e3fb5e8959g96eb5d13gfff976ee7ge478173g205d0276g0105397cf2g55cb33d1ebb5c6gc90db526d11e8506ff05185d71dg67b32dg022f18gfgc0b033cbb928gbg7c10e93561499d8cd9b8d5051ecb9e2562f912506ee55g8e16b0dg74g51b377g4134f496ce8b233fedd1g489fe40e21b0808f16
          type: string
        remember:
          example: true
          type: boolean
      required:
        - access_token
        - refresh_token
        - expires_in
        - remember
      type: object
    User:
      properties:
        avatarImage:
          example: avatars/avatar-572.png
          format: url
          pattern: ^avatars\/avatar-\d+$
          type: string
        created_at:
          example: '2021-09-17 18:44:00'
          format: date-time
          type: string
        energy:
          example: 176
          type: integer
        id:
          $ref: '#/components/schemas/user_id'
        last_achievement:
          $ref: '#/components/schemas/Category'
        last_location:
          $ref: '#/components/schemas/Location'
        last_login:
          example: '2021-09-17 18:44:00'
          format: date-time
          type: string
        last_seen_social:
          example: 771-upgrade-10725 2022-01-14 00:58:17
          pattern: ' \d{4}-\d\d-\d\d \d\d:\d\d:\d\d$'
          type: string
        last_skill:
          $ref: '#/components/schemas/Skill'
        last_upgrade:
          $ref: '#/components/schemas/Upgrade'
        level:
          example: 8
          type: integer
        location_id:
          example: GLI2HHRC84F1TJ6
          pattern: ^[A-Z0-9]{15}$
          type: string
        mood:
          example: 82
          type: integer
        name:
          example: Ustice
          type: string
        registered:
          example: '2022-01-11 06:11:43'
          format: date-time
          type: string
      required:
        - avatarImage
        - created_at
        - energy
        - id
        - last_login
        - last_seen_social
        - level
        - location_id
        - mood
        - name
      type: object
    Achievement:
      type: object
      required:
        - id
        - category_id
        - name
        - description
        - status_text
        - conditions
        - reward_xp
        - reward_currants
        - reward_mood
        - reward_energy
        - reward_giant
        - reward_giant_favor
        - created_at
        - updated_at
        - reward
        - category
      properties:
        id:
          $ref: '#/components/schemas/achievement_id'
        category_id:
          $ref: '#/components/schemas/category_id'
        name:
          type: string
          example: Junior OK Explorer
        description: 
          type: string
          example: Visited 5 new locations.
        status_text:
          type: string
          example: >-
            Hey! You're getting pretty good at finding your way around. 
            You've earned a Junior OK Explorer badge.
        conditions:
          type: array
          items:
            title: AchievementCondition
            type: object
            properties:
              type:
                type: string
                enum:
                  - counter
                  - group_sum
                  - group_count
              group:
                type: string
              label:
                type: string
                nullable: true
              value:
                type: string
        reward_xp:
          example: 125
          type: integer
        reward_currants:
          type: integer
          example: 0
        reward_mood:
          type: integer
          example: 0
        reward_energy:
          type: integer
          example: 0
        reward_giant:
          $ref: '#/components/schemas/giant_id'
        reward_giant_favor:
          type: integer
          example: 10
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        reward:
          $ref: '#/components/schemas/Reward'
        category:
          $ref: '#/components/schemas/category_id'
    UserAchievment:
      title: UserAchievment
      allOf:
        - $ref: '#/components/schemas/Achievement'
        - $ref: '#/components/schemas/UserAchievementConnections'
    UserAchievementConnections:
      type: object
      required:
        - pivot
      properties:
        pivot:
          title: UserAchievementPivot
          type: object
          required:
            - user_id
            - achievement_id
          properties:
            user_id:
              $ref: '#/components/schemas/user_id'
            achievement_id:
              $ref: '#/components/schemas/achievement_id'
    AchievementConnections:
      type: object
      required:
        - connections_from
        - connections_to
        - required_for_upgrades
        - required_for_recipes
        - items
      properties:
        connections_from:
          type: array
          items:
            $ref: '#/components/schemas/AchievementAchievement'
        connections_to:
          type: array
          items:
            $ref: '#/components/schemas/AchievementAchievement'
        required_for_upgrades:
          type: array
          items:
            $ref: '#/components/schemas/AchievementUpgrade'
        required_for_recipes:
          type: array
          items:
            $ref: '#/components/schemas/AchievementRecipe'
        items:
          type: array
          items:
            $ref: '#/components/schemas/AchievementItem'
    AchievementAchievement:
      title: AchievementAchievement
      allOf:
        - $ref: '#/components/schemas/Achievement'
        - $ref: '#/components/schemas/AchievementAchievementConnection'
    AchievementUpgrade:
      title: AchievementUpgrade
      allOf:
        - $ref: '#/components/schemas/Upgrade'
        - $ref: '#/components/schemas/AchievementUpgradeConnections'
    AchievementRecipe:
      title: AchievementRecipe
      allOf:
        - $ref: '#/components/schemas/Recipe'
        - $ref: '#/components/schemas/AchievementRecipeConnection'
    AchievementItem:
      title: AchievementItem
      allOf:
        - $ref: '#/components/schemas/Item'
        - $ref: '#/components/schemas/AchievementItemConnections'
    AchievementAchievementConnection:
      type: object
      properties:
        achievement_id:
          $ref: '#/components/schemas/Achievement'
        connection_id:
          $ref: '#/components/schemas/Achievement'
    AchievementUpgradeConnections:
      type: object
      properties:
        pivot:
          title: AchievementUpgradePivot
          type: object
          properties:
            achievement_id:
              $ref: '#/components/schemas/achievement_id'
            upgrade_id:
              $ref: '#/components/schemas/upgrade_id'
    AchievementRecipeConnection:
      type: object
      properties:
        pivot:
          title: AchievementRecipePivot
          type: object
          properties:
            achievement_id:
              $ref: '#/components/schemas/achievement_id'
            recipe_id:
              $ref: '#/components/schemas/Recipe'
    AchievementItemConnections:
      type: object
      required:
        - achievement_id
        - item_id
      properties:
        achievement_id:
          $ref: '#/components/schemas/achievement_id'
        item_id:
          $ref: '#/components/schemas/item_id'
    AchievementDetails:
      title: AchievementDetails
      allOf:
        - $ref: '#/components/schemas/Achievement'
        - $ref: '#/components/schemas/AchievementConnections'
    Skill:
      required:
        - id
        - category_id
        - name
        - group
        - level
        - description
        - point_cost
        - requires_level
        - quest_id
        - req_quests
        - created_at
        - updated_at
      properties:
        id:
          $ref: '#/components/schemas/skill_id'
        category_id:
          $ref: '#/components/schemas/category_id'
        name:
          type: string
          example: Light Green Thumb I
        group:
          example: light
          type: string
        level:
          example: 1
          type: integer
        description:
          example: >-
            This is the first step towards a better relationship with plant life of all kinds. 
            It ensures success when watering and petting trees and plants, halves the time 
            required to water and gives some modest imagination rewards.
          type: string
        point_cost:
          example: 600
          type: integer
        requires_level:
          example: 0
          type: integer
        quest_id:
          $ref: '#/components/schemas/quest_id'
        req_quests:
          type: array
          items:
            $ref: '#/components/schemas/quest_id'
        created_at:
          $ref: '#/components/schemas/datetime'
        updated_at:
          $ref: '#/components/schemas/datetime'
    SkillDetails:
      title: SkillDetails
      allOf:
        - $ref: '#/components/schemas/Skill'
        - $ref: '#/components/schemas/SkillConnections'
    SkillConnections:
      type: object
      required:
        - learned
        - required_skills
        - required_achievements
        - required_upgrades
        - required_for_skills
        - required_for_achievements
        - required_for_upgrades
        - required_for_recipes
        - giants
      properties:
        learned:
          example: >-
            With Light Green Thumb, you've just taken a step into a bigger world.
            A world where you grok plants, and they grok you right back. Armed
            with your trusty Watering Can, you will now enjoy some modest rewards
            now that you know how to water and pet the veg properly, and at twice
            the speed to boot. 
          type: string
        required_skills: 
          type: array
          items:
            $ref: '#/components/schemas/SkillDetails'
        required_achievements:
          type: array
          items:
            $ref: '#/components/schemas/AchievementDetails'
        required_upgrades:
          type: array
          items:
            $ref: '#/components/schemas/UpgradeDetails'
        required_for_skills:
          type: array
          items:
            $ref: '#/components/schemas/SkillDetails'
        required_for_achievements:
          type: array
          items:
            $ref: '#/components/schemas/AchievementDetails'
        required_for_upgrades:
          type: array
          items:
            $ref: '#/components/schemas/UpgradeDetails'
        required_for_recipes:
          type: array
          items:
            $ref: '#/components/schemas/Recipe'
        giants:
          type: array
          items:
            $ref: '#/components/schemas/SkillGiant'
    SkillGiant:
      title: SkillGiant
      allOf:
        - $ref: "#/components/schemas/Giant"
        - $ref: '#/components/schemas/SkillGiantConnections'
    SkillGiantConnections:
      type: object
      properties:
        pivot:
          title: SkillGiantPivot
          type: object
          properties:
            skill_id:
              $ref: '#/components/schemas/skill_id'
            giant_id:
              $ref: '#/components/schemas/giant_id'
            primary:
              type: integer
              enum:
                - 0
                - 1
    UserSkillConnections:
      type: object
      required:
        - pivot
        - learned
        - starts
        - ends
      properties:
        pivot:
          title: UserSkillPivot
          type: object
          required:
            - user_id
            - skill_id
          properties:
            user_id:
              $ref: '#/components/schemas/user_id'
            skill_id:
              $ref: '#/components/schemas/skill_id'
        learned:
          description: Indicates whether a user has learned the skill.
          type: integer
          enum:
            - 0
            - 1
        starts:
          $ref: '#/components/schemas/datetime'
        ends:
          $ref: '#/components/schemas/datetime'
    UserSkill:
      title: UserSkill
      allOf:
        - $ref: '#/components/schemas/Skill'
        - $ref: '#/components/schemas/UserSkillConnections'
      properties:
        id:
          $ref: '#/components/schemas/skill_id'
        category_id:
          $ref: '#/components/schemas/category_id'
        name:
          type: string
          example: Light Green Thumb I
        group:
          example: light
          type: string
        level:
          example: 1
          type: integer
        description:
          example: >-
            This is the first step towards a better relationship with plant life of all kinds. 
            It ensures success when watering and petting trees and plants, halves the time 
            required to water and gives some modest imagination rewards.
          type: string
        learned:
          type: integer
          example: 1
        point_cost:
          example: 600
          type: integer
        requires_level:
          example: 0
          type: integer
        quest_id:
          $ref: '#/components/schemas/quest_id'
        req_quests:
          type: array
          items:
            $ref: '#/components/schemas/quest_id'
        created_at:
          $ref: '#/components/schemas/datetime'
        updated_at:
          $ref: '#/components/schemas/datetime'
        skill_id:
          $ref: '#/components/schemas/skill_id'
        pivot:
          $ref: '#/components/schemas/UserSkillConnection'
    UserSkillConnection:
      type: object
      properties:
        user_id:
          $ref: '#/components/schemas/user_id'
        skill_id:
          $ref: '#/components/schemas/skill_id'
    Upgrade:
      required:
        - id
        - category_id
        - name
        - display_name
        - description
        - cost
        - max_uses
        - chance
        - conditions
        - rewards
        - requires_level
        - requires_max_energy
        - created_at
        - updated_at
        - value
        - upgrade_id
        - desc
      properties:
        id:
          $ref: '#/components/schemas/upgrade_id'
        category_id:
          $ref: '#/components/schemas/category_id'
        name:
          example: Energy Tank +{amount}
          type: string
        display_name:
          type: string
          example: Energy Tank Increase
        description:
          type: string
          example: "Life's a lot less fun on an empty tank: make yours bigger!"
        cost:
          type: integer
        max_uses:
          type: integer
        chance:
          type: integer
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/UpgradeCondition'
        rewards:
          type: array
          items:
            $ref: '#/components/schemas/UpgradeReward'
        requires_level:
          type: integer
        requires_max_energy:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        value:
          type: string
          example: "190"
        upgrade_id:
          $ref: '#/components/schemas/upgrade_id'
        desc:
          type: string
          example: "Life's a lot less fun on an empty tank: make yours bigger!"
    UpgradeCondition:
      discriminator:
        propertyName: type
        mapping:
          1: '#/components/schemas/UpgradeConditionNull'
          2: '#/components/schemas/UpgradeConditionLevel'
          3: '#/components/schemas/UpgradeConditionUpgrade'
          4: '#/components/schemas/UpgradeConditionSkill'
          5: '#/components/schemas/UpgradeConditionAchievement'
          6: '#/components/schemas/UpgradeConditionQuest'
          7: '#/components/schemas/UpgradeConditionMaxEnergy'
      oneOf:
        - $ref: '#/components/schemas/UpgradeConditionNull'
        - $ref: '#/components/schemas/UpgradeConditionLevel'
        - $ref: '#/components/schemas/UpgradeConditionUpgrade'
        - $ref: '#/components/schemas/UpgradeConditionSkill'
        - $ref: '#/components/schemas/UpgradeConditionAchievement'
        - $ref: '#/components/schemas/UpgradeConditionQuest'
        - $ref: '#/components/schemas/UpgradeConditionMaxEnergy'
    UpgradeConditionNull:
      type: object
      required:
        - type
      properties:
        type:
          type: number
          enum:
            - 1
    UpgradeConditionLevel:
      type: object
      required:
        - type
      properties:
        type:
          type: number
          enum:
            - 2
        level:
          type: integer
    UpgradeConditionUpgrade:
      type: object
      required:
        - type
      properties:
        type:
          type: number
          enum:
            - 3
        imagination_id:
          type: string
    UpgradeConditionSkill:
      type: object
      required:
        - type
      properties:
        type:
          type: number
          enum:
            - 4
        skill_id:
          type: string
    UpgradeConditionAchievement:
      type: object
      required:
        - type
      properties:
        type:
          type: number
          enum:
            - 5
        achievement_id:
          type: string
    UpgradeConditionQuest:
      type: object
      required:
        - type
      properties:
        type:
          type: number
          enum:
            - 6
        quest_id:
          type: string
    UpgradeConditionMaxEnergy:
      type: object
      required:
        - type
      properties:
        type:
          type: number
          enum:
            - 7
        max_energy:
          type: string
    UpgradeDetails:
      title: UpgradeDetails
      allOf:
        - $ref: '#/components/schemas/Upgrade'
        - $ref: '#/components/schemas/UpgradeConnections'
    UpgradeConnections:
      type: object
      required:
        - required_skills
        - required_achievements
        - required_upgrades
        - required_for_skills
      properties:
        required_skills:
          type: array
          items:
            $ref: '#/components/schemas/UpgradeSkill'
        required_achievements:
          type: array
          items:
            $ref: '#/components/schemas/UpgradeAchievement'
        required_upgrades:
          type: array
          items:
            $ref: '#/components/schemas/UpgradeUpgrade'
        required_for_skills:
          type: array
          items:
            $ref: '#/components/schemas/UpgradeSkill'
    UpgradeUpgrade:
      title: UpgradeUpgrade
      allOf:
        - $ref: '#/components/schemas/Upgrade'
        - $ref: '#/components/schemas/UpgradeUpgradeConnection'
    UpgradeAchievement:
      title: UpgradeAchievement
      allOf:
        - $ref: '#/components/schemas/Achievement'
        - $ref: '#/components/schemas/UpgradeAchievementConnection'
    UpgradeSkill:
      title: UpgradeSkill
      allOf:
        - $ref: '#/components/schemas/Skill'
        - $ref: '#/components/schemas/UpgradeSkillConnection'
    UpgradeAchievementConnection:
      type: object
      required:
        - upgrade_id
        - achievement_id
      properties:
        upgrade_id:
          $ref: '#/components/schemas/upgrade_id'
        achievement_id:
          $ref: '#/components/schemas/achievement_id'
    UpgradeUpgradeConnection:
      type: object
      required:
        - pivot
      properties:
        pivot:
          title: UpgradeUpgradePivot
          type: object
          required:
            - upgrade_id
            - required_for_upgrade
          properties:
            upgrade_id:
              $ref: '#/components/schemas/upgrade_id'
            required_upgrade_id:
              $ref: '#/components/schemas/upgrade_id'
    UpgradeSkillConnection:
      type: object
      required:
        - pivot
      properties:
        pivot:
          title: UpgradeSkillPivot
          type: object
          required:
            - upgrade_id
            - skill_id
          properties:
            upgrade_id:
              $ref: '#/components/schemas/upgrade_id'
            skill_id:
              $ref: '#/components/schemas/skill_id'
    UserUpgrade:
      title: UserUpgrade
      allOf:
        - $ref: '#/components/schemas/Upgrade'
        - $ref: '#/components/schemas/UserUpgradeConnection'
    UserUpgradeConnection:
      type: object
      required:
          - pivot
      properties:
        pivot:
          title: UserUpgradePivot
          type: object
          required:
            - user_id
            - upgrade_id
          properties:
            user_id:
              $ref: '#/components/schemas/user_id'
            upgrade_id:
              $ref: '#/components/schemas/upgrade_id'
    UpgradeReward:
      discriminator:
        propertyName: type
        mapping:
          1: '#/components/schemas/UpgradeRewardMovement'
          2: '#/components/schemas/UpgradeRewardKeepable'
          3: '#/components/schemas/UpgradeRewardLearning'
      oneOf:
        - $ref: '#/components/schemas/UpgradeRewardMovement'
        - $ref: '#/components/schemas/UpgradeRewardKeepable'
        - $ref: '#/components/schemas/UpgradeRewardLearning'
    UpgradeRewardMovement:
      type: object
      required:
        - type
        - vx_max
        - gravity
        - vy_jump
        - can_3_jump
        - can_wall_jump
        - multiplier_3_jump
      properties:
        type:
          type: integer
          enum:
            - 1
        vx_max:
          description: Represents walking speed
          type: number
          nullable: true
        gravity:
          type: number
          nullable: true
        vy_jump:
          example: 0.907
          type: number
          nullable: true
        can_3_jump:
          type: boolean
          nullable: true
        can_wall_jump:
          type: boolean
          nullable: true
        multiplier_3_jump:
          type: number
          nullable: true
    UpgradeRewardKeepable:
      type: object
      required:
        - num
        - type
        - class_id
      properties:
        num:
          type: integer
          description: number of keepables rewarded
          nullable: true
        type:
          type: integer
          enum:
            - 8
        class_id:
          $ref: '#/components/schemas/item_id'
    UpgradeRewardLearning:
      type: object
      required:
        - type
      properties:
        type:
          type: integer
          enum:
            - 9
    ServerStats:
      properties:
        players_count:
          type: integer
          example: 771
        version:
          type: string
          example: "0.9.3"
      required:
        - players_count
        - version

    # -----------------------------------
    # API Response Schemas
    # -----------------------------------
    ErrorResponse:
      properties:
        error:
          example: Something went wrong
          type: string
      required:
        - error
      type: object
    GetServerStatsResponse:
      $ref: "#/components/schemas/ServerStats"
    GetAchievementsByCategoryResponse:
      type: array
      items:
        $ref: '#/components/schemas/Achievement'
    GetAchievementResponse:
      $ref: '#/components/schemas/AchievementDetails'
    GetCategoriesResponse:
      $ref: '#/components/schemas/CategoryIndex'
    GetInhabitantResponse:
      $ref: '#/components/schemas/InhabitantDetails'
    GetInhabitantsByCategoryResponse:  
      type: array
      items:
        $ref: '#/components/schemas/Inhabitant'
    GetItemResponse:
      $ref: '#/components/schemas/ItemDetails'
    GetItemsByCategoryResponse:
      type: array
      items:
        $ref: '#/components/schemas/Item'
    GetRegionResponse:
      $ref: '#/components/schemas/Location'
    GetLocationResponse:
      $ref: '#/components/schemas/LocationDetails'
    GetUpgradesByCategoryResponse:
      type: array
      items:
        $ref: '#/components/schemas/Upgrade'
    GetUpgradeResponse:
      type: array
      items:
        $ref: '#/components/schemas/UpgradeDetails'
    GetSearchResponse:
      $ref: '#/components/schemas/SearchResults'
    GetSkillsByCategoryResponse:
      type: array
      items:
        $ref: '#/components/schemas/Skill'
    GetSkillResponse:
      $ref: '#/components/schemas/SkillDetails'
    LoginResponse:
      $ref: '#/components/schemas/SessionInfo'
    LoginRefreshResponse:
      $ref: '#/components/schemas/SessionInfo'
    GetMeResponse:
      $ref: '#/components/schemas/User'
    GetUserResponse:
      $ref: '#/components/schemas/User'
    GetUserSkillsResponse:
      type: array
      items:
        $ref: '#/components/schemas/UserSkill'
    GetUserUpgradesResponse:
      type: array
      items:
        $ref: '#/components/schemas/UserUpgrade'
    GetUserAchievementsResponse:
      type: array
      items:
        $ref: '#/components/schemas/UserAchievment'
  requestBodies:
    Login:
      description: Authentication credentials
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthenticationCredentials'
  responses:
    Error:
      description: Something went wrong
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    GetServerStats:
      description: Successfully loaded server stats
      content:
        'application/json':
          examples:
            example-0001:
              value:
                players_count: 771
                version: "0.9.3"
          schema:
            $ref: '#/components/schemas/GetServerStatsResponse'
    GetAchievementsByCategory:
      description: Successfully loaded Achievement by category
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/GetAchievementsByCategoryResponse'
    GetAchievement:
      description: Successfully loaded Achievement
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetAchievementResponse'
    GetCategories:
      description: CategoryIndex
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetCategoriesResponse'
    GetGiant:
      description: Successfully loaded Giant
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GiantDetails'
    GetInhabitant:
      description: Successfully loaded Inhabitant
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/GetInhabitantResponse'
    GetInhabitantsByCategory:
      description: Sucessfully loaded Inhabitants by category
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/GetInhabitantsByCategoryResponse'
    GetItem:
      description: Successfully loaded Item
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/GetItemResponse'
    GetItemsByCategory:
      description: Sucessfully loaded Items by category
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/GetItemsByCategoryResponse'
    GetRegion:
      description: Successfully loaded Region
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/GetRegionResponse'
    GetUpgradesByCategory:
      description: Sucessfully loaded Inhabitants by category
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/GetUpgradesByCategoryResponse'
    GetUpgrade:
      description: Sucessfully loaded Inhabitants by category
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/GetUpgradeResponse'
    GetSearch:
      description: Successfully loaded search results
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/GetSearchResponse'
    GetSkillsByCategory:
      description: Sucessfully loaded Inhabitants by category
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/GetSkillsByCategoryResponse'
    GetSkill:
      description: Sucessfully loaded Inhabitants by category
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/GetSkillResponse'
    PostLogin:
      description: Successful authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginResponse'
    PostLoginRefresh:
      description: The user has successfully refreshed their session
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginRefreshResponse'
    GetMe:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetMeResponse'
      description: Hey, it's you!
    GetUser:
      description: Successfully loaded user info
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetUserResponse'
    GetUserSkills:
      description: Sucessfully loaded the User's Skills
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/GetUserSkillsResponse'
    GetUserUpgrades:
      description: Sucessfully loaded the User's Upgrades
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/GetUserUpgradesResponse'
    GetUserAchievements:
      description: Sucessfully loaded the given user's achievments
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/GetUserAchievementsResponse'
paths:
  "/configs":
    get:
      description: ''
      operationId: serverStats
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/GetServerStats'
      summary: 'List '
      tags:
        - OddGiants
    parameters: []
  '/encyclopedia/achievments/{category_id}':
    get:
      description: Get Achievements by category
      operationId: achievementsByCategory
      parameters:
        - $ref: '#/components/parameters/category_id'
      responses:
        '200':
          $ref: '#/components/responses/GetAchievementsByCategory'
      tags:
        - OddGiants
  '/encyclopedia/achievement/{achievement_id}':
    parameters:
      - $ref: '#/components/parameters/achievement_id'
    get:
      operationId: achievement
      description: Gets Achievement details
      responses:
        '200':
          $ref: '#/components/responses/GetAchievement'
      tags:
        - OddGiants
  '/encyclepedia/categories':
    get:
      operationId: categories
      description: Categories of information available within the encyclopedia/api
      responses:
        '200':
          $ref: '#/components/responses/GetCategories'
      tags:
        - OddGiants
  '/encyclopedia/giants/{giant_id}':
    parameters:
      - $ref: '#/components/parameters/giant_id'
    get:
      operationId: giant
      responses:
        '200':
          $ref: '#/components/responses/GetGiant'
      tags:
        - OddGiants
  '/encyclopedia/inhabitant/{inhabitant_id}':
    parameters:
      - $ref: '#/components/parameters/inhabitant_id'
    get:
      operationId: inhabitant
      responses:
        '200':
          $ref: '#/components/responses/GetInhabitant'
      tags:
        - OddGiants
  '/encyclopedia/inhabitants/{category_id}': 
    parameters:
      - $ref: '#/components/parameters/category_id'
    get:
      operationId: inhabitantsByCategory
      responses:
        '200':
          $ref: '#/components/responses/GetInhabitantsByCategory'
      tags:
        - OddGiants
  '/encyclopedia/items/{category_id}':
    parameters:
      - $ref: '#/components/parameters/category_id'
    get:
      operationId: itemsByCategory
      description: List items by category
      responses:
        '200':
          $ref: '#/components/responses/GetItemsByCategory'
      tags:
        - OddGiants
  '/encyclopedia/item/{item_id}':
    parameters:
      - $ref: '#/components/parameters/item_id'
    get:
      operationId: item
      description: Item information
      responses:
        '200':
          $ref: '#/components/responses/GetItem'
      tags:
        - OddGiants
  '/encyclopedia/locations/{region_id}':
    parameters:
      - $ref: '#/components/parameters/region_id'
    get:
      operationId: region
      description: Locations around Ur
      responses:
        '200':
          $ref: '#/components/responses/GetRegion'
      tags:
        - OddGiants
  '/encyclopedia/location/{location_id}':
    parameters:
      - in: path
        name: location_id
        required: true
        schema:
          $ref: '#/components/schemas/location_id'
    get:
      operationId: location
      description: Locations around Ur
      responses:
        '200':
          description: Location loaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLocationResponse'
      tags:
        - OddGiants
  '/encyclopedia/upgrades/{category_id}':
    parameters:
      - $ref: '#/components/parameters/category_id'
    get:
      operationId: upgradesByCategory
      description: Get Upgradse by category
      responses:
        '200':
          $ref: '#/components/responses/GetUpgradesByCategory'
      tags:
        - OddGiants
  '/encyclopedia/upgrade/{upgrade_id}':
    parameters:
      - $ref: '#/components/parameters/upgrade_id'
    get:
      operationId: upgrade
      description: Gets the details of an Upgrade
      responses:
        '200':
          $ref: '#/components/responses/GetUpgrade'
      tags:
        - OddGiants
  '/encyclopedia/search':
    parameters:
      - $ref: '#/components/parameters/search_query'
    get:
      operationId: search
      description: Search
      responses:
        '200':
          $ref: '#/components/responses/GetSearch'
      tags:
        - OddGiants
  '/encyclopedia/skills/{category_id}':
    parameters:
      - $ref: '#/components/parameters/category_id'
    get:
      operationId: skillsByCategory
      description: Get Skill by category
      responses:
        '200':
          $ref: '#/components/responses/GetSkillsByCategory'
      tags:
        - OddGiants
  '/encyclopedia/skill/{skill_id}':
    parameters:
      - $ref: '#/components/parameters/skill_id'
    get:
      operationId: skill
      description: Get Skill
      responses:
        '200':
          $ref: '#/components/responses/GetSkill'
      tags:
        - OddGiants
  "/login":
    post:
      operationId: login
      description: |
        User's provide an email address and password to gain access to authenticated routes.
      requestBody:
        $ref: '#/components/requestBodies/Login'
      responses:
        '200':
          $ref: '#/components/responses/PostLogin'
        '302':
          description: The user failed to log in successfully
      summary: Logs in a user
      tags:
        - OddGiants
  "/login/refresh":
    post:
      operationId: loginRefresh
      description: By sending the refresh_token, the user is able to refresh their session.
      responses:
        '200':
          $ref: '#/components/responses/PostLoginRefresh'
        '400':
          $ref: '#/components/responses/Error'
      summary: Refreshes the user's session
      tags:
        - OddGiants
  "/users":
    get:
      operationId: me
      description: Gets the authenticated user
      responses:
        '200':
          $ref: '#/components/responses/GetMe'
      summary: Gets the authenticated user
      tags:
        - OddGiants
  "/users/{user_id}":
    parameters:
      - $ref: '#/components/parameters/user_id'
    get:
      operationId: user
      description: Gets information about a specific user
      responses:
        '200':
          $ref: '#/components/responses/GetUser'
      tags:
        - OddGiants
  "/users/{user_id}/skills":
    parameters:
      - $ref: '#/components/parameters/user_id'
    get:
      operationId: userSkills
      description: Gets the skills for a given user
      responses:
        '200':
          $ref: '#/components/responses/GetUserSkills'
      tags:
        - OddGiants
  "/users/{user_id}/upgrades":
    parameters:
      - $ref: '#/components/parameters/user_id'
    get:
      operationId: userUpgrades
      description: Gets the upgrades for a given user
      responses:
        '200':
          $ref: '#/components/responses/GetUserUpgrades'
      tags:
        - OddGiants
  "/users/{user_id}/achievments":
    parameters:
      - $ref: '#/components/parameters/user_id'
    get:
      operationId: userAchievements
      description: Gets the achievments for a given user
      responses:
        '200':
          $ref: '#/components/responses/GetUserAchievements'
      tags:
        - OddGiants

servers:
  - description: Odd Giants Public API
    url: https://api.oddgiants.com/public
tags:
  - name: OddGiants
    description: API for game data
